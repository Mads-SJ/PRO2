package bagopgave;public class ArrayBag<T> implements Bag<T>{    T[] elements = (T[]) new Object[10];    int size = 0;    @Override    public int getCurrentSize()    {        return size;    }    @Override    public boolean isFull()    {        return size == elements.length;    }    @Override    public boolean isEmpty()    {        return size == 0;    }    @Override    public boolean add(T newEntry)    {        if (isFull()) { return false; }        elements[size] = newEntry;        size++;        return true;    }    @Override    public T remove()    {        if (isEmpty()) { return null; }        T removedElement = elements[0];        size--;        shift(0);        for (int i = 1; i < size; i++)        {            if (elements[i].equals(removedElement))            {                shift(i);                size--;            }        }        return removedElement;    }    @Override    public boolean remove(T anEntry)    {        if (isEmpty()) { return false; }        boolean removed = false;        int i = 0;        while (!removed && i < size)        {            if (elements[i].equals(anEntry))            {                size--;                removed = true;                shift(i);            } else {                i++;            }        }        return removed;    }    @Override    public void clear()    {        for (int i = 0; i < size; i++)        {            elements[i] = null;        }        size = 0;    }    @Override    public int getFrequencyOf(T anEntry)    {        int frequency = 0;        for (int i = 0; i < size; i++)        {            if (elements[i].equals(anEntry))            {                frequency++;            }        }        return frequency;    }    @Override    public boolean contains(T anEntry)    {        boolean found = false;        int i = 0;        while (!found && i < size)        {            if (elements[i].equals(anEntry))            {                found = true;            }            i++;        }        return found;    }    @Override    public T[] toArray()    {        T[] array = (T[]) new Object[size];        for (int i = 0; i < size; i++)        {            array[i] = elements[i];        }        return array;    }    private void shift(int from) {        for (int i = from; i < size; i++)        {            elements[i] = elements[i + 1];        }    }}